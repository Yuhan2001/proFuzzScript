diff --git a/src/Makefile.am b/src/Makefile.am
index 085d6968..39f3887e 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -132,7 +132,8 @@ owntone_SOURCES = main.c \
 	outputs/plist_wrap.h \
 	$(LIBWEBSOCKETS_SRC) \
 	$(GPERF_SRC) \
-	$(LEXER_SRC) $(PARSER_SRC)
+	$(LEXER_SRC) $(PARSER_SRC) \
+	../sqlext/sqlext.c
 
 # This should ensure the headers are built first. automake knows how to make
 # parser headers, but doesn't know how to do that for flex. So instead we set
diff --git a/src/db.c b/src/db.c
index 339802b7..56a36e01 100644
--- a/src/db.c
+++ b/src/db.c
@@ -1664,6 +1664,8 @@ db_set_cfg_names(void)
 #undef Q_TMPL
 }
 
+int sqlite3_extension_init(sqlite3 *db, char **pzErrMsg, const sqlite3_api_routines *pApi);
+
 void
 db_hook_post_scan(void)
 {
@@ -6967,7 +6969,7 @@ db_open(void)
       return -1;
     }
 
-  ret = sqlite3_load_extension(hdl, PKGLIBDIR "/" PACKAGE_NAME "-sqlext.so", NULL, &errmsg);
+  ret = sqlite3_extension_init(hdl, &errmsg, NULL);
   if (ret != SQLITE_OK)
     {
       DPRINTF(E_LOG, L_DB, "Could not load SQLite extension: %s\n", errmsg);
diff --git a/src/httpd.c b/src/httpd.c
index de984be3..97b930a7 100644
--- a/src/httpd.c
+++ b/src/httpd.c
@@ -1174,6 +1174,9 @@ httpd_send_reply(struct httpd_request *hreq, int code, const char *reason, enum
 
   cors_headers_add(hreq, httpd_allow_origin);
 
+  if(evbuf)
+    evbuffer_add(evbuf, "\r\n", 2);
+
   if (do_gzip && (gzbuf = httpd_gzip_deflate(hreq->out_body)))
     {
       DPRINTF(E_DBG, L_HTTPD, "Gzipping response\n");
diff --git a/src/httpd_daap.c b/src/httpd_daap.c
index ee3df2d8..b924228d 100644
--- a/src/httpd_daap.c
+++ b/src/httpd_daap.c
@@ -2337,7 +2337,7 @@ daap_reply_build(const char *uri, const char *user_agent, int is_remote)
 static int
 daap_init(void)
 {
-  srand((unsigned)time(NULL));
+  srand(0);
   current_rev = 2;
 
   return 0;
diff --git a/src/main.c b/src/main.c
index 87bb67da..a71d9d63 100644
--- a/src/main.c
+++ b/src/main.c
@@ -232,7 +232,7 @@ register_services(char *ffid, bool no_web, bool no_rsp, bool no_daap, bool no_mp
   int i;
   int ret;
 
-  srand((unsigned int)time(NULL));
+  srand(0);
 
   lib = cfg_getsec(cfg, "library");
 
diff --git a/src/misc.c b/src/misc.c
index c7c383ce..02efe261 100644
--- a/src/misc.c
+++ b/src/misc.c
@@ -1650,7 +1650,7 @@ mutex_init(pthread_mutex_t *mutex)
   int err;
 
   CHECK_ERR(L_MISC, pthread_mutexattr_init(&mattr));
-  CHECK_ERR(L_MISC, pthread_mutexattr_settype(&mattr, PTHREAD_MUTEX_ERRORCHECK));
+  //CHECK_ERR(L_MISC, pthread_mutexattr_settype(&mattr, PTHREAD_MUTEX_ERRORCHECK));
   err = pthread_mutex_init(mutex, &mattr);
   CHECK_ERR(L_MISC, pthread_mutexattr_destroy(&mattr));
 
diff --git a/src/outputs/raop.c b/src/outputs/raop.c
index 341f2c32..dca3e90a 100644
--- a/src/outputs/raop.c
+++ b/src/outputs/raop.c
@@ -662,7 +662,9 @@ raop_crypt_add_oaep_padding(uint8_t *em, const size_t emlen, const uint8_t *m, c
   /* Step 6:
    * Generate a random octet string seed of length hLen
    */
-  seed = gcry_random_bytes(hlen, GCRY_STRONG_RANDOM);
+  //seed = gcry_random_bytes(hlen, GCRY_STRONG_RANDOM);
+  seed = malloc(hlen);
+  memset(seed, 0, hlen);
   if (!seed)
     {
       DPRINTF(E_LOG, L_RAOP, "Could not allocate memory for OAEP seed\n");
@@ -1544,7 +1546,8 @@ raop_send_req_announce(struct raop_session *rs, evrtsp_req_cb cb, const char *lo
     }
 
   /* Session ID and session URL */
-  gcry_randomize(&session_id, sizeof(session_id), GCRY_STRONG_RANDOM);
+  //gcry_randomize(&session_id, sizeof(session_id), GCRY_STRONG_RANDOM);
+  memset(&session_id, 0, sizeof(session_id));
 
   if (family == AF_INET)
     ret = snprintf(rs->session_url, sizeof(rs->session_url), "rtsp://%s/%u", address, session_id);
@@ -1580,7 +1583,8 @@ raop_send_req_announce(struct raop_session *rs, evrtsp_req_cb cb, const char *lo
   /* Challenge - but only if session is encrypted (important for ATV3 after update 6.0) */
   if (rs->encrypt)
     {
-      gcry_randomize(challenge, sizeof(challenge), GCRY_STRONG_RANDOM);
+      //gcry_randomize(challenge, sizeof(challenge), GCRY_STRONG_RANDOM);
+      memset(challenge, 0, sizeof(challenge));
       challenge_b64 = b64_encode(challenge, sizeof(challenge));
       if (!challenge_b64)
 	{
@@ -4587,8 +4591,10 @@ raop_init(void)
   int ret;
 
   // Generate AES key and IV
-  gcry_randomize(raop_aes_key, sizeof(raop_aes_key), GCRY_STRONG_RANDOM);
-  gcry_randomize(raop_aes_iv, sizeof(raop_aes_iv), GCRY_STRONG_RANDOM);
+  //gcry_randomize(raop_aes_key, sizeof(raop_aes_key), GCRY_STRONG_RANDOM);
+  //gcry_randomize(raop_aes_iv, sizeof(raop_aes_iv), GCRY_STRONG_RANDOM);
+  memset(raop_aes_key, 0, sizeof(raop_aes_key));
+  memset(raop_aes_iv, 0, sizeof(raop_aes_iv));
 
   // Setup AES
   gc_err = gcry_cipher_open(&raop_aes_ctx, GCRY_CIPHER_AES, GCRY_CIPHER_MODE_CBC, 0);
diff --git a/src/transcode.c b/src/transcode.c
index 3f5b4a8f..3f5b3441 100644
--- a/src/transcode.c
+++ b/src/transcode.c
@@ -1013,7 +1013,7 @@ open_decoder(AVCodecContext **dec_ctx, unsigned int *stream_index, struct decode
       avcodec_free_context(dec_ctx);
       return ret;
     }
-
+  dec_ctx->thread_count=1;
   ret = avcodec_open2(*dec_ctx, NULL, NULL);
   if (ret < 0)
     {
