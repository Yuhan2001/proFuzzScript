diff --git a/src/main.c b/src/main.c
index 8c3e34e5bc..5e6b83666f 100644
--- a/src/main.c
+++ b/src/main.c
@@ -1447,9 +1447,9 @@ int main_loop(void)
 		/* Register the children that will keep updating their
 		 * local configuration */
 		cfg_register_child(1   /* main = udp listener */
-						   + 1 /* timer */
+						   // + 1 /* timer */
 #ifdef USE_SLOW_TIMER
-						   + 1 /* slow timer */
+						   // + 1 /* slow timer */
 #endif
 		);
 		if(do_suid() == -1)
@@ -1484,14 +1484,13 @@ int main_loop(void)
 
 #ifdef USE_SLOW_TIMER
 		/* we need another process to act as the "slow" timer*/
+	/*	
 		pid = fork_process(PROC_TIMER, "slow timer", 0);
 		if(pid < 0) {
 			LM_CRIT("Cannot fork\n");
 			goto error;
 		}
 		if(pid == 0) {
-			/* child */
-			/* timer!*/
 			if(real_time & 2)
 				set_rt_prio(rt_timer2_prio, rt_timer2_policy);
 
@@ -1501,29 +1500,29 @@ int main_loop(void)
 		} else {
 			slow_timer_pid = pid;
 		}
+	*/
 #endif
 		/* we need another process to act as the "main" timer*/
+	/*
 		pid = fork_process(PROC_TIMER, "timer", 0);
 		if(pid < 0) {
 			LM_CRIT("Cannot fork\n");
 			goto error;
 		}
 		if(pid == 0) {
-			/* child */
-			/* timer!*/
 			if(real_time & 1)
 				set_rt_prio(rt_timer1_prio, rt_timer1_policy);
 			if(arm_timer() < 0)
 				goto error;
 			timer_main();
 		} else {
-			/* do nothing for main timer */
 		}
 
 		if(sr_wtimer_start() < 0) {
 			LM_CRIT("Cannot start wtimer\n");
 			goto error;
 		}
+		*/
 		/* main process, receive loop */
 		process_no = 0; /*main process number*/
 		pt[process_no].pid = getpid();
@@ -1537,7 +1536,6 @@ int main_loop(void)
 			LM_ERR("init_child(PROC_MAIN) -- exiting\n");
 			goto error;
 		}
-
 		/* We will call child_init even if we
 		 * do not fork - and it will be called with rank 1 because
 		 * in fact we behave like a child, not like main process
@@ -1560,11 +1558,11 @@ int main_loop(void)
 		/* Register the children that will keep updating their
 		 * local configuration. (udp/tcp/sctp listeneres
 		 * will be added later.) */
-		cfg_register_child(1 /* timer */
+		// cfg_register_child(1 /* timer */
 #ifdef USE_SLOW_TIMER
-						   + 1 /* slow timer */
+						//    + 1 /* slow timer */
 #endif
-		);
+		//);
 
 		for(si = udp_listen; si; si = si->next) {
 			/* create the listening socket (for each address)*/
@@ -1898,12 +1896,12 @@ int main_loop(void)
 
 #ifdef USE_SLOW_TIMER
 		/* fork again for the "slow" timer process*/
+		/*
 		pid = fork_process(PROC_TIMER, "slow timer", 1);
 		if(pid < 0) {
 			LM_CRIT("cannot fork \"slow\" timer process\n");
 			goto error;
 		} else if(pid == 0) {
-			/* child */
 			if(real_time & 2)
 				set_rt_prio(rt_timer2_prio, rt_timer2_policy);
 			if(arm_slow_timer() < 0)
@@ -1912,15 +1910,16 @@ int main_loop(void)
 		} else {
 			slow_timer_pid = pid;
 		}
+		*/
 #endif /* USE_SLOW_TIMER */
 
 		/* fork again for the "main" timer process*/
+		/*
 		pid = fork_process(PROC_TIMER, "timer", 1);
 		if(pid < 0) {
 			LM_CRIT("cannot fork timer process\n");
 			goto error;
 		} else if(pid == 0) {
-			/* child */
 			if(real_time & 1)
 				set_rt_prio(rt_timer1_prio, rt_timer1_policy);
 			if(arm_timer() < 0)
@@ -1931,6 +1930,7 @@ int main_loop(void)
 			LM_CRIT("Cannot start wtimer\n");
 			goto error;
 		}
+		*/
 
 		/* init childs with rank==MAIN before starting tcp main (in case they want
 	 * to fork  a tcp capable process, the corresponding tcp. comm. fds in
@@ -2599,7 +2599,8 @@ int main(int argc, char **argv)
 	} else {
 		LM_WARN("could not open /dev/urandom (%d)\n", errno);
 	}
-	seed += getpid() + time(0);
+	// seed += getpid() + time(0);
+	seed=0;
 	LM_DBG("seeding PRNG with %u\n", seed);
 	cryptorand_seed(seed);
 	fastrand_seed(cryptorand());
